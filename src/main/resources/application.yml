####################################################################
# 공통 환경 설정 
####################################################################
#-------------------------------------------------------------
# springdoc 정의
# http://localhost:8080/swagger-ui.html
# http://localhost:8080/api-docs
# http://localhost:8080/api-docs.yaml
#-------------------------------------------------------------      
springdoc:
  api-docs:
    path: /api-docs # spring boot 웹 애플리케이션의 api를 OpenAPI 3을 이용하여 json 형식화 한것의 경로
  default-consumes-media-type: application/json # request media type 의 기본 값
  default-produces-media-type: application/json # response media type 의 기본 값
  swagger-ui: # 기본값 : 컨트롤러 내에서 정의한 api 메서드 순
    enabled: true
    operations-sorter: method # 태그 내 각 api의 정렬 기준
                              # alpha(알파벳 오름차순), method(http method 순) 
    tags-sorter: alpha 
    path: swagger-ui.html
    disable-swagger-default-url: true
      # json화 된 config파일 대신 파라미터를 이용하여 swagger-ui에 접근하도록 합니다.
      # api-docs(/api-docs) 및 swagger-ui.configUrl(/api-docs/swagger-config)를 두번씩 호출하는 것을 방지합니다.
    doc-expansion: none # 기본 값: list
      # tag와 operation을 펼치는 방식에 대한 설정
      # String=["list", "full", "none"]
      # none으로 설정할 경우, tag 및 operation이 모두 닫힌채로 문서가 열립니다.
  #paths-to-match: # OpenAPI 3 로 문서화할 api path 리스트
  #  - /**
  
api:  # Swagger UI Information
  info:
    title: CareMoa Authority Service API
    description: API to fetch CareMoa Authority
    version: 1.0.0
    terms-of-service: http://caremoa.com/terms/
    contact:
      name: CareMoa Service API Team
      email: lbg@sk.com
      url: http://sk.com/caremoateam
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
    
jwt:
  header: Authorization
  #HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다.
  #echo 'com.caremoa.jwtcom.caremoa.jwtcom.caremoa.jwtcom.caremoa.jwtcom.caremoa.jwtcom.caremoa.jwt'|base64
  secret: Y29tLmNhcmVtb2Euand0Y29tLmNhcmVtb2Euand0Y29tLmNhcmVtb2Euand0Y29tLmNhcmVtb2Euand0Y29tLmNhcmVtb2Euand0Y29tLmNhcmVtb2Euand0Cg==
  token-validity-in-seconds: 86400


spring:
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:authority
    username: sa
    password: 

  jpa:
    open-in-view: false
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: none # create, create-drop, validate, update, none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        # SpringPhysicalNamingStrategy(Default)  =>  camel case를 underscore 형태로 변경
        # PhysicalNamingStrategyStandardImpl     =>  변수 이름을 그대로 사용
        use-new-id-generator-mappings: false
    # generate-ddl: true
    show_sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        show_sql: true 
---
####################################################################
# Local 개발환경 설정
####################################################################
spring:
  config:
    activate:
      on-profile: default
#-------------------------------------------------------------
# Port설정
#-------------------------------------------------------------        
server:
  port: 8079
  servlet:
    contextPath: /authority
        
#-------------------------------------------------------------
# 사용자 정의 설정
#-------------------------------------------------------------        
prop:
  member:
    url: http://localhost:8081/member

---
####################################################################
# 서버배포(Docker)환경 설정
####################################################################
spring:
  config:
    activate:
      on-profile: docker
      
#-------------------------------------------------------------
# Port설정
#-------------------------------------------------------------        
server:
  port: 8080
  servlet:
    contextPath: /authority
        
#-------------------------------------------------------------
# 사용자 정의 설정
#-------------------------------------------------------------        
prop:
  member:
    url: http://member:8080/member
